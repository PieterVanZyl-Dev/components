/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/

@use 'sass:math';

@use '../internal/styles' as styles;
@use '../internal/styles/tokens' as awsui;
@use '../internal/generated/custom-css-properties/index.scss' as custom-props;

$grid-columns: 12;

.grid {
  // The grid component mostly behaves like a flex layout, but gap with
  // display flex isn't supported on Safari 13.x and 14.0.
  display: grid;
  grid-template-rows: auto;
  grid-template-columns: repeat($grid-columns, 1fr);
  gap: var(#{custom-props.$gridGutterGap});
  &.no-gutters {
    #{custom-props.$gridGutterGap}: 0;
  }
  @include styles.styles-reset;

  // The gutter width is used for width calculations inside offset-*, push-*,
  // and pull-* classes. Having "&.no-gutters" checks for each class inside
  // that for-loop will cause a combinatorial explosion of generated classes.
  // So we use a custom property instead.
  #{custom-props.$gridGutterGap}: awsui.$space-grid-gutter;
}

.grid-column {
  position: relative;
  place-self: stretch;
  max-width: 100%;
}

@for $i from 1 through $grid-columns {
  .colspan-#{$i} {
    grid-column: auto / span $i;

    // This is a custom property for the same reason grid gutters are. The
    // rest of the classes depend on the colspan. Rather than generating
    // those classes inside an inner loop, we can just set a value here that
    // will be used inside the calc functions of offset-*, push-*, and pull-*.
    #{custom-props.$gridColumnSpan}: #{$i};
  }

  // Since this is a fluid grid, the width of the column is dependent on the
  // available space, so we need to use percentages. But with CSS grid,
  // percentages are relative to the colspan, not the grid parent. But since
  // we know the colspan, we can "reverse engineer" the width to use.
  //
  // For example, for a 3-column wide item, `100% + $gridGutterGap` gives
  // us the width of 3 columns + 3 gutters. Divide that by 3 ($gridColumnSpan),
  // and you get the width of 1 column + 1 gutter, which is what we shift by.
  $colspan-width: calc(
    ((100% + var(#{custom-props.$gridGutterGap})) / #{var(#{custom-props.$gridColumnSpan})}) * #{$i}
  );

  .offset-#{$i} {
    margin-left: $colspan-width;
  }

  .push-#{$i} {
    left: $colspan-width;
  }

  .pull-#{$i} {
    right: $colspan-width;
  }
}
